name: Test & Build

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
  unit-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type check
        run: npm run typecheck
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        continue-on-error: true
        id: test-coverage
        
      - name: Generate coverage summary
        run: |
          echo "COVERAGE_LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')" >> $GITHUB_ENV
          echo "COVERAGE_STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')" >> $GITHUB_ENV
          echo "COVERAGE_FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')" >> $GITHUB_ENV
          echo "COVERAGE_BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')" >> $GITHUB_ENV
          
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 5
          
  e2e-test:
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install chromium
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 5
          
  build:
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read .nvmrc
        id: nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build production
        run: npm run build
        
  status-comment:
    needs: [lint, unit-test, e2e-test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage
          
      - uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-results
          
      - name: Create status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let totalCoverage = 'N/A';
            let coverageSummary = '';
            
            try {
              if (fs.existsSync('./coverage/coverage-summary.json')) {
                const unitCoverageSummary = fs.readFileSync('./coverage/coverage-summary.json', 'utf8');
                const coverage = JSON.parse(unitCoverageSummary);
                
                coverageSummary = `
                | Metric | Coverage | Target |
                |--------|----------|--------|
                | Lines | ${coverage.total.lines.pct.toFixed(2)}% | 80% |
                | Statements | ${coverage.total.statements.pct.toFixed(2)}% | 80% |
                | Functions | ${coverage.total.functions.pct.toFixed(2)}% | 80% |
                | Branches | ${coverage.total.branches.pct.toFixed(2)}% | 80% |
                `;
                
                totalCoverage = coverage.total.statements.pct.toFixed(2) + '%';
              }
            } catch (error) {
              console.error('Error reading coverage data:', error);
              coverageSummary = 'Error reading coverage data';
            }
            
            const e2eResultsExists = fs.existsSync('./e2e-results/playwright-report/index.html');
            
            const body = `## CI Status: ✅ Build Completed
            
            ### Coverage Summary
            ${coverageSummary}
            
            ### E2E Tests
            - Status: ${e2eResultsExists ? '✅ Completed' : '⚠️ No results found'}
            
            ### Build
            - ✅ Build successful
            
            ${totalCoverage !== 'N/A' && parseFloat(totalCoverage) < 80 ? '⚠️ **Note:** Test coverage is below the target of 80%. Please add more tests or adjust thresholds in vitest.config.ts.' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            }); 